#include <iostream>
#include <vector>
using namespace std;

//-------------------------------------------------------------------------------------------------
//printing sudoku in console
//-------------------------------------------------------------------------------------------------
void printSudoku(int arr[9][9])
{ 
	for (int i = 0; i < 9; i++) 
	{
		for (int j = 0; j < 9; j++)
		{
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}
//--------------------------------------------------------------------------------------------------
//can we put number n on arr[row][col] place ?
//--------------------------------------------------------------------------------------------------
bool can_or_cant(int arr[9][9], int row, int col, int n)
{
	if (arr[row][col] != 0) return false;
	bool status = true;
	int y = (col / 3) * 3;
	int x = (row / 3) * 3;
	for (int i = 0; i < 9; i++) {
		if (arr[row][i] == n) { status = false; break; }
		if (arr[i][col] == n) { status = false; break; }
		if (arr[x + i / 3][y + i % 3] == n) { status = false; break; }
	}
	return status;
}
//----------------------------------------------------------------------------------------------------
//finding next place where we have to fill number in sudoku or we have empty block
//----------------------------------------------------------------------------------------------------
void nextZero(int arr[9][9], int row, int col, int& nextrow, int& nextcol)
{

	int curr_box=9*9;
	for (int i=row * 9 + col + 1 ; i <9 * 9 ; i++) 
	{
		if (arr[i/9][i%9]==0) 
		{
			curr_box = i;
			break;
		}
	}
	nextrow =  curr_box / 9;
	nextcol =  curr_box % 9;
}
//-----------------------------------------------------------------------------------------------------
//to copy arrey into another arrey
//-----------------------------------------------------------------------------------------------------
void copyArray(int arr[9][9], int cpyarr[9][9]) {
	for (int i=0;i<9;i++)
	{
		for (int j=0;j<9;j++)
		{
		    cpyarr[i][j] = arr[i][j];
		}
	}
}
//-----------------------------------------------------------------------------------------------------
//finding number for arr[row][col] place that can be put here from 1 to 9.
//-----------------------------------------------------------------------------------------------------
vector<int> finding_nos_for_place(int arr[9][9], int row, int col) {
	vector<int> placebles = {};
	for (int n=1;n<= 9;n++)
	{
		if (can_or_cant(arr, row, col, n)) 
		placebles.push_back(n);
	}
	return placebles;
}
//-----------------------------------------------------------------------------------------------------
// finding whether solution for this sudoku exists or not
//-----------------------------------------------------------------------------------------------------
bool solution(int arr[9][9], int row, int col)
{
	if (row > 8) return true;
	if (arr[row][col] != 0) 
	{
		int nextrow, nextcol;
		nextZero(arr, row, col, nextrow, nextcol);
		return solution(arr, nextrow, nextcol);
	}

	vector<int> placebles = finding_nos_for_place(arr, row, col);
	if (placebles.size() == 0) 
	{return false;} 
	bool status = false;
	for (int i = 0; i < placebles.size(); i++) {
		int n = placebles[i];
		int cpyarr[9][9];
		copyArray(arr, cpyarr);
		cpyarr[row][col] = n;
		int nextrow = row;
		int nextcol = col;
		nextZero(cpyarr, row, col, nextrow, nextcol);
		if (solution(cpyarr, nextrow, nextcol)) 
		{
			copyArray(cpyarr, arr);
			status = true;
			break;
		}
	}
	return status;
}
//----------------------------------------------------------------------------------------------------
int main()
{
	int board[9][9] = {
		{5,3,0,0,7,0,0,0,0},
		{6,0,0,1,9,5,0,0,0},
		{0,9,8,0,0,0,0,6,0},
		{8,0,0,0,6,0,0,0,3},
		{4,0,0,8,0,3,0,0,1},
		{7,0,0,0,2,0,0,0,6},
		{0,6,0,0,0,0,2,8,0},
		{0,0,0,4,1,9,0,0,5},
		{0,0,0,0,8,0,0,7,9}
	};
	
	if (solution(board, 0, 0))
	{
		cout<<"sudoku solved"<<endl;
	    printSudoku(board);
	}
	else cout<<"sudoku has error"<<endl;
	return 0;
}
